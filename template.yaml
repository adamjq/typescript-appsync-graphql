AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: GraphQL Messages API using NodeJS and Typescript

Parameters:
  APIName:
    Type: String
    Description: The name of the GraphQL API
    MinLength: 3
    MaxLength: 20
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
    Default: MessagesGraphQLAPI

Globals:
  Function:
    Runtime: nodejs10.x
    Timeout: 10

Resources:

  MessagesDynamoDBTable:
    Description: "NoSQL DB for Device Messages"
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${APIName}-messages-ddb-table
      AttributeDefinitions:
        - AttributeName: deviceId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: deviceId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  DevicesDynamoDBTable:
    Description: "NoSQL DB for Devices"
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${APIName}-devices-ddb-table
      AttributeDefinitions:
        - AttributeName: deviceId
          AttributeType: S
      KeySchema:
        - AttributeName: deviceId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Description: "The GraphQL API for the Messages"
    Properties:
      AuthenticationType: "API_KEY"
      Name: !Sub ${APIName}
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncApiRole.Arn
        FieldLogLevel: ALL

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DefinitionS3Location: ./schema.graphql

  AppSyncApiRole:
    Type: AWS::IAM::Role
    Description: "An IAM Role to allow AWS AppSync logging to Cloudwatch"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AWSAppSyncPushToCloudWatchLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "*"

  AppSyncLambdaServiceRole:
    Type: AWS::IAM::Role
    Description: "An IAM Role to allow AWS AppSync to invoke lambda functions"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppSyncInvokeLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt GetUserLambdaFunction.Arn
                  - !GetAtt GetMessageLambdaFunction.Arn
                  - !GetAtt AllMessagesLambdaFunction.Arn
                  - !GetAtt StoreMessageLambdaFunction.Arn
                  - !GetAtt GetDeviceLambdaFunction.Arn
        - PolicyName: AWSAppSyncPushToCloudWatchLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "*"

  # AppSync Lambdas

  GetUserLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./handler.zip
      Handler: getUser.handler
      Environment:
        Variables:
          MESSAGES_DYNAMODB_TABLE: !Ref MessagesDynamoDBTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MessagesDynamoDBTable

  GetMessageLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./handler.zip
      Handler: getMessage.handler
      Environment:
        Variables:
          MESSAGES_DYNAMODB_TABLE: !Ref MessagesDynamoDBTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MessagesDynamoDBTable

  AllMessagesLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./handler.zip
      Handler: allMessages.handler
      Environment:
        Variables:
          MESSAGES_DYNAMODB_TABLE: !Ref MessagesDynamoDBTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MessagesDynamoDBTable

  StoreMessageLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./handler.zip
      Handler: storeMessage.handler
      Environment:
        Variables:
          MESSAGES_DYNAMODB_TABLE: !Ref MessagesDynamoDBTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MessagesDynamoDBTable

  GetDeviceLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./handler.zip
      Handler: getDevice.handler
      Environment:
        Variables:
          DEVICES_DYNAMODB_TABLE: !Ref DevicesDynamoDBTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DevicesDynamoDBTable

  # AppSync Data Sources

  GetUserLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: !Sub ${APIName}_GetUserLambdaDataSource
      Description: "The AppSync Lambda Data Source for getting a user from cognito (pipeline resolver function)"
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncLambdaServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GetUserLambdaFunction.Arn

  GetMessageLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: !Sub ${APIName}_GetMessageLambdaDataSource
      Description: "The AppSync Lambda Data Source for getting a message"
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncLambdaServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GetMessageLambdaFunction.Arn

  AllMessagesLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: !Sub ${APIName}_AllMessagesLambdaDataSource
      Description: "The AppSync Lambda Data Source for getting all messages"
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncLambdaServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt AllMessagesLambdaFunction.Arn

  StoreMessageLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: !Sub ${APIName}_StoreMessageLambdaDataSource
      Description: "The AppSync Lambda Data Source for storing a message"
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncLambdaServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt StoreMessageLambdaFunction.Arn

  GetDeviceLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: !Sub ${APIName}_GetDeviceLambdaDataSource
      Description: "The AppSync Lambda Data Source for getting a device"
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncLambdaServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GetDeviceLambdaFunction.Arn

  # AppSync Resolvers

  GetUserFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      Name: GetUserFunction
      FunctionVersion: "2018-05-29"
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt GetUserLambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "identity": $utils.toJson($context.identity),
          }
        }
      ResponseMappingTemplate: |
        ## Raise a GraphQL field error in case of a datasource invocation error
        #if($ctx.error)
          $util.error($context.error.message, $context.error.type)
        #end
        $util.qr($ctx.stash.put("user", $ctx.result))
        ## Pass back the result from Lambda. **
        $utils.toJson($context.result)

  GetMessageQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getMessage
      DataSourceName: !GetAtt GetMessageLambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "arguments": $utils.toJson($ctx.args),
            "identity": $utils.toJson($context.identity)
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)

  AllMessagesQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: allMessages
      DataSourceName: !GetAtt AllMessagesLambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "arguments": $utils.toJson($ctx.args),
            "identity": $utils.toJson($context.identity)
          }
        }
      ResponseMappingTemplate: $utils.toJson($context.result)

  StoreMessageMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: storeMessage
      DataSourceName: !GetAtt StoreMessageLambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "arguments": $utils.toJson($ctx.args),
            "identity": $utils.toJson($context.identity)
          }
        }
      ResponseMappingTemplate: $utils.toJson($context.result)

  GetDeviceQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getDevice
      RequestMappingTemplate: "{}"
      ResponseMappingTemplate: $util.toJson($context.result)
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt GetUserFunction.FunctionId
          - !GetAtt GetDeviceFunction.FunctionId

  GetDeviceFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      Name: GetDeviceFunction
      FunctionVersion: "2018-05-29"
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt GetDeviceLambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "arguments": $utils.toJson($context.arguments),
            "identity": $utils.toJson($context.identity),
            "user": $utils.toJson($context.stash.user),
          }
        }
      ResponseMappingTemplate: |
        ## Raise a GraphQL field error in case of a datasource invocation error
        #if($ctx.error)
          $util.error($context.error.message, $context.error.type)
        #end
        ## Pass back the result from Lambda. **
        $utils.toJson($context.result)

  GetDeviceMessagesResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Device
      FieldName: messages
      DataSourceName: !GetAtt AllMessagesLambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "arguments": $utils.toJson($ctx.source),
            "identity": $utils.toJson($context.identity)
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)

Outputs:

  MessagesDynamoDBTableName:
    Description: The name of the DynamoDB Table for Messages
    Value: !Ref MessagesDynamoDBTable

  DevicesDynamoDBTableName:
    Description: The name of the DynamoDB Table for Devices
    Value: !Ref DevicesDynamoDBTable

  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value: !GetAtt AppSyncApi.GraphQLUrl

  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value: !GetAtt AppSyncApi.ApiId
